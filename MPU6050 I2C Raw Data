#include <stdlib.h>
#include <string.h>
#include <board.h>
#include <assert.h>
//usage for cassert here https://www.tutorialspoint.com/c_standard_library/assert_h.htm


/*****************************************************************************
 * Private types/enumerations/variables
 ****************************************************************************/
#define DEFAULT_I2C          I2C0

#define I2C_EEPROM_BUS       DEFAULT_I2C
#define I2C_IOX_BUS          DEFAULT_I2C

#define SPEED_100KHZ         100000
#define SPEED_400KHZ         400000



static int mode_poll;   /* Poll/Interrupt mode flag */
static I2C_ID_T i2cDev = DEFAULT_I2C; /* Currently active I2C device */

/* EEPROM SLAVE data */
#define I2C_SLAVE_EEPROM_SIZE       64
#define I2C_SLAVE_EEPROM_ADDR       0x5A
#define I2C_SLAVE_TEMP_ADDR         0x68

/* Xfer structure for slave operations */
static I2C_XFER_T temp_xfer;
static I2C_XFER_T iox_xfer;

static uint8_t i2Cbuffer[2][256];



/*****************************************************************************
 * Private functions
 ****************************************************************************/

/* State machine handler for I2C0 and I2C1 */
static void i2c_state_handling(I2C_ID_T id)
{
	if (Chip_I2C_IsMasterActive(id)) {
		Chip_I2C_MasterStateHandler(id);
	} else {
		Chip_I2C_SlaveStateHandler(id);
	}
}

/* Set I2C mode to polling/interrupt */
static void i2c_set_mode(I2C_ID_T id, int polling)
{
	if(!polling) {
		mode_poll &= ~(1 << id);
		Chip_I2C_SetMasterEventHandler(id, Chip_I2C_EventHandler);
		NVIC_EnableIRQ(id == I2C0 ? I2C0_IRQn : I2C1_IRQn);
	} else {
		mode_poll |= 1 << id;
		NVIC_DisableIRQ(id == I2C0 ? I2C0_IRQn : I2C1_IRQn);
		Chip_I2C_SetMasterEventHandler(id, Chip_I2C_EventHandlerPolling);
	}
}

/* Initialize the I2C bus */
static void i2c_app_init(I2C_ID_T id, int speed)
{
	Board_I2C_Init(id);

	/* Initialize I2C */
	Chip_I2C_Init(id);
	Chip_I2C_SetClockRate(id, speed);

	/* Set default mode to interrupt */
	i2c_set_mode(id, 0);
}

static void i2c_read_setup(I2C_XFER_T *xfer, uint8_t addr, int numBytes)
{
	xfer->slaveAddr = addr;
	xfer->rxBuff = 0;
	xfer->txBuff = 0;
	xfer->txSz = 0;
	xfer->rxSz = numBytes;
	xfer->rxBuff = i2Cbuffer[1];

}


/*****************************************************************************
 * Public functions
 ****************************************************************************/
/**
 * @brief	SysTick Interrupt Handler
 * @return	Nothing
 * @note	Systick interrupt handler updates the button status
 */
void SysTick_Handler(void)
{
}

/**
 * @brief	I2C Interrupt Handler
 * @return	None
 */
void I2C1_IRQHandler(void)
{
	i2c_state_handling(I2C1);
}

/**
 * @brief	I2C0 Interrupt handler
 * @return	None
 */
void I2C0_IRQHandler(void)
{
	i2c_state_handling(I2C0);
}

/**
 * @brief	Main program body
 * @return	int
 */
void MPU6050_Init(void)
{
	MPU6050_Write(0x6B,0b01000001);
	MPU6050_Write(0x1B,0b00001000);
	MPU6050_Write(0x1C,0b00001000);
	MPU6050_Write(0x6B,0b00000001);
}
/*Referencing MPU6050 datasheet page 35  assuming Chip_I2C_MasterSend Does AD+W for us
 * return 1 if we succefully write tto the register
 */
void MPU6050_Write(uint8_t Reg, uint8_t value){
	uint8_t data[2];
	data[0] = Reg;
	data[1] = value;
	int k1 = Chip_I2C_MasterSend(I2C0, 0x68 , data, sizeof(data));
	assert(k1 > 0);
}
/*
 * Read Acceleration, Temperature, and Gyro data
 * discard Temperature,  and return a pointer of 12 byte containing the 6 DOF Motion Data
 */
void MPU6050_GetMotionData(uint16_t *ax, uint16_t *ay, uint16_t *az,uint16_t *gx, uint16_t *gy,uint16_t *gz){
	uint8_t rx_data[14];
	int k = Chip_I2C_MasterCmdRead(I2C0,0x68,0x3B,rx_data,14);
	assert(k==14);
	uint16_t MotionData[6];
	ax = rx_data[0]<<8 | rx_data[1];
	ay = rx_data[2]<<8 | rx_data[3];
	az = rx_data[4]<<8 | rx_data[5];
	gx = rx_data[8]<<8 | rx_data[9];
	gy = rx_data[10]<<8 | rx_data[11];
	gz = rx_data[12]<<8 | rx_data[13];
	printf("%d \r\n",(int)ax);
	printf("%d \r\n",(int)ay);
	printf("%d \r\n",(int)az);
	printf("%d \r\n",(int)gx);
	printf("%d \r\n",(int)gy);
	printf("%d \r\n",(int)gz);
	uint16_t temperature = rx_data[6]<<8 | rx_data[7];
	printf("temperature is %d \r\n", temperature);


}
int main(void)
{
	uint16_t ax,ay,az,gx,gy,gz;
	int tmp;
	int xflag = 0;
	Board_Init();
	SystemCoreClockUpdate();
	i2c_app_init(I2C0, SPEED_100KHZ);
	i2c_set_mode(I2C0, 0);
	i2cDev = I2C0;

	i2c_read_setup(&temp_xfer, (I2C_SLAVE_TEMP_ADDR<<1), 14);

    MPU6050_Init();
    while(1){
    	MPU6050_GetMotionData(&ax,&ay,&az,&gx,&gy,&gz);
    }
    printf("%d \r\n",ax);
    printf("%d \r\n",ay);
    printf("%d \r\n",az);
    printf("%d \r\n",gx);
    printf("%d \r\n",gy);
    printf("%d \r\n",gz);

	Chip_I2C_DeInit(I2C0);
	return 0;
}
